var CACHE_VERSION = 'v1';
var CACHE_NAME = CACHE_VERSION + ':sw-cache-';

function onInstall(event) {
  console.log('[Serviceworker]', "Installing!", event);
  event.waitUntil(
    caches.open(CACHE_NAME).then(function prefill(cache) {
      return cache.addAll([

        // make sure serviceworker.js is not required by application.js
        // if you want to reference application.js from here
        '<%#= asset_path "guest.js" %>',
        '<%#= asset_path "logged.js" %>',

        '<%= asset_path "guest.scss" %>',
        '<%= asset_path "logged.scss" %>',

        '/offline.html',

      ]);
    })
  );
}

function onActivate(event) {
  console.log('[Serviceworker]', "Activating!", event);
  event.waitUntil(
    caches.keys().then(function(cacheNames) {
      return Promise.all(
        cacheNames.filter(function(cacheName) {
          // Return true if you want to remove this cache,
          // but remember that caches are shared across
          // the whole origin
          return cacheName.indexOf(CACHE_VERSION) !== 0;
        }).map(function(cacheName) {
          return caches.delete(cacheName);
        })
      );
    })
  );
}

// Borrowed from https://github.com/TalAter/UpUp
function onFetch(event) {
  event.respondWith(
    // try to return untouched request from network first
    fetch(event.request).catch(function() {
      // if it fails, try to return request from the cache
      return caches.match(event.request).then(function(response) {
        if (response) {
          return response;
        }
        // if not found in cache, return default offline content for navigate requests
        if (event.request.mode === 'navigate' ||
          (event.request.method === 'GET' && event.request.headers.get('accept').includes('text/html'))) {
          console.log('[Serviceworker]', "Fetching offline content", event);
          return caches.match('/offline.html');
        }
      })
    })
  );
}


self.addEventListener('install', onInstall);
self.addEventListener('activate', onActivate);
self.addEventListener('fetch', onFetch);
self.addEventListener('push', event => {
  object = JSON.parse(event.data.text())
  var title = object.title || "Nueva Notificacion";
  var body = object.body;
  var icon = object.icon || "https://s3.us-east-2.amazonaws.com/cdn.jalecitos.com/images/favicon.png";
  var tag = object.tag
  var badge = object.badge
  var url = object.openUrl

  event.waitUntil(
      self.registration.showNotification(title, {
          body: body,
          icon: icon,
          tag: tag,
          badge: badge,
          data: {
            url: url
          }
      })
  );
});
self.addEventListener('notificationclick', e => {

  const notification = e.notification;
  console.log(notification);
  const resp = clients.matchAll()
  .then (tabs => {
    //  only return tabs that are visible
    let tab = tabs.find( t => {
      return t.visibilityState === 'visible'
    });
    // navigate to the tab and focus it if is open
    if (tab !== undefined) {
      tab.navigate(notification.data.url);
      tab.focus();
      // otherwise open a new browser and go to the url
    } else {
      clients.openWindow(notification.data.url);
    }

    notification.close();
  });

  e.waitUntil(resp);

});
